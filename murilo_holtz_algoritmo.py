# -*- coding: utf-8 -*-
"""Murilo_Holtz_algoritmo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SahT9sX4oX3Sm52WG-3Hv7e9xhG5c_GP
"""

!pip install --upgrade gspread

import sys
sys.setrecursionlimit(21000) # aumentando o limite de recursao para a funçao

import math
import random
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.style as style
from cycler import cycler

import time

import numpy as np
import pandas as pd
from collections import Counter

style.use('seaborn-poster')
style.use('ggplot')

matplotlib.rcParams['font.family'] = "serif"

# função de ordenação insertionSort
def insertionSort(array):
    for i in range(1, len(array)):
        key = array[i] 
        j = i-1
        while (j >= 0 and key < array[j]): 
                array[j+1] = array[j] 
                j -= 1
        array[j+1] = key 
    return array

# função de ordenação countingSort
def countingSort(array, maxVal):
    m = maxVal + 1
    count = [0] * m                
    
    for a in array:
        count[a] += 1             
    i = 0
    for a in range(m):            
        for c in range(count[a]):  
            array[i] = a
            i += 1
    return array

# função de ordenação mergeSort
def mergeSort(array):
    # dividindo
    if (len(array)>1):
        mid = len(array)//2
        left = array[:mid]
        right = array[mid:]
        mergeSort(left)
        mergeSort(right)
        i=0
        j=0
        k=0
        while i < len(left) and j < len(right):
            if (left[i] < right[j]):
                array[k]=left[i]
                i=i+1
            else:
                array[k]=right[j]
                j=j+1
            k=k+1

        while (i < len(left)):
            array[k]=left[i]
            i=i+1
            k=k+1

        while (j < len(right)):
            array[k]=right[j]
            j=j+1
            k=k+1

from google.colab import auth
auth.authenticate_user()

import gspread
from oauth2client.client import GoogleCredentials

gc = gspread.authorize(GoogleCredentials.get_application_default())

sh = gc.open('dados-sp-covid')

worksheet = sh.sheet1

dados = pd.DataFrame(worksheet.get_all_records())
dados.head()

idadePaciente1 = worksheet.col_values(27)
idadePaciente2 = worksheet.col_values(27)
idadePaciente3 = worksheet.col_values(27)

del idadePaciente1[0]
del idadePaciente2[0]
del idadePaciente3[0]
print('idade dos pacientes: ', idadePaciente1)

estadoFinal = worksheet.col_values(29)
del estadoFinal[0]
print('estado final do tratamento: ', estadoFinal)

relacaoPacienteEstadoFinal = [0] * len(estadoFinal)

for i in range(len(idadePaciente)):
  relacaoPacienteEstadoFinal[i] = idadePaciente1[i] + ' ' + estadoFinal[i]

print('relação entre idade e estado final: ', relacaoPacienteEstadoFinal)

curaPaciente = dados.query("evolucaoCaso == 'Cura'")
#print(curaPaciente.idade)

curadosIdade = curaPaciente.idade.values.tolist()
print('idade pacientes curados: ', curadosIdade)

def strToInt(array):
  for i in range(len(array)):
    array[i] = int(array[i])
  return array

strToInt(idadePaciente1)
strToInt(idadePaciente2)
strToInt(idadePaciente3)
print("A maior idade na lista atual é: ", max(idadePaciente1))

start = time.time() #medindo o tempo
countingSort(idadePaciente1, max(idadePaciente1))
print(idadePaciente1)
end = time.time()
print("Tempo de execução countingSort:", end - start)

start = time.time() #medindo o tempo
insertionSort(idadePaciente2)
print(idadePaciente2)
end = time.time()
print("Tempo de execução insertionSort:", end - start)

start = time.time() #medindo o tempo
mergeSort(idadePaciente3)
print(idadePaciente3)
end = time.time()
print("Tempo de execução mergeSort:", end - start)

curadosIdadeOrd = countingSort(curadosIdade, max(curadosIdade))

plt.hist(idadePacienteOrd, bins=np.arange(min(idadePacienteOrd), max(idadePacienteOrd)+1), color='darkred', label='Pacientes geral',  alpha=0.5,
         joinstyle='round')
plt.hist(curadosIdadeOrd, bins=np.arange(min(curadosIdadeOrd), max(curadosIdadeOrd)+1), color='darkcyan', label='Pacientes Curados', 
         alpha=0.7, edgecolor='black', linewidth=1.2)
plt.legend('PC')
plt.xlabel('Idade', fontsize='15')
plt.ylabel('Número de pacientes', fontsize='15')
plt.title('Idade x Pacientes\n', fontsize='20', fontweight='bold')
plt.text(92, 550, 'P = Pacientes no total\nC = Pacientes curados', fontsize=13)
plt.style.use('ggplot')
fig = plt.gcf()
fig.set_size_inches(20,10)
plt.show()

assintomaticos = dados.query("sintomas == 'Assintomático'")
# print(assintomaticos.evolucaoCaso)
assintomaticosCurados = assintomaticos.evolucaoCaso.values.tolist()

assintomaticosId = assintomaticos.ÿid.values.tolist()
assintomaticosMunicipio = assintomaticos.municipio.values.tolist()
assintomaticosTeste = assintomaticos.estadoTeste.values.tolist()
assintomaticosTipoTeste = assintomaticos.tipoTeste.values.tolist()
assintomaticosResultado = assintomaticos.resultadoTeste.values.tolist()

# print(assintomaticosCurados)
assintomaticosIdCurados = []
assintomaticosMunicipioCurado = []
assintomaticosTesteCurados = []
assintomaticosResultadoCurados = []
assintomaticosTipoTesteCurados = []


for i in range(len(assintomaticosId)):
  if assintomaticosCurados[i] == 'Cura':
    assintomaticosIdCurados.append(assintomaticosId[i])
    assintomaticosMunicipioCurado.append(assintomaticosMunicipio[i])
    assintomaticosTesteCurados.append(assintomaticosTeste[i])
    assintomaticosResultadoCurados.append(assintomaticosResultado[i])
    assintomaticosTipoTesteCurados.append(assintomaticosTipoTeste[i])

assintomaticosInfo = ['Assintomático'] * len(assintomaticosIdCurados)

data = np.array([assintomaticosIdCurados,
                 assintomaticosInfo,
                 assintomaticosMunicipioCurado,
                 assintomaticosTesteCurados,
                 assintomaticosTipoTesteCurados,
                 assintomaticosResultadoCurados])

pd.set_option('max_rows', None)
tabelaAssintomaticosCurados = pd.DataFrame(data)
tabelaAssintomaticosCurados

notificacao = worksheet.col_values(2)
del notificacao[0]
notificacaoOrd = sorted(notificacao)

print(notificacao)
# quatro ultimos elementos são 'null', 'null', 'null', 'undefined'
# excluindo:
notificacaoOrd = np.array(notificacaoOrd)
notificacaoOrd = np.delete(notificacaoOrd, 19999)
notificacaoOrd = np.delete(notificacaoOrd, 19998)
notificacaoOrd = np.delete(notificacaoOrd, 19997)
notificacaoOrd = np.delete(notificacaoOrd, 19996)
print(notificacaoOrd)

notificacaoData = []
aux = ''

# removendo horarios da data e deixando apenas o A/M/D
for i in range(len(notificacaoOrd)):
    for j in (range(0, 10)):
        aux = aux + notificacaoOrd[i][j]
    notificacaoData.append(aux)
    aux = ''

print('Datas ordenadas das notificações dos pacientes: ', notificacaoData)

numeroOcorrencias = Counter(notificacaoData)

d = numeroOcorrencias
df = pd.DataFrame.from_dict(d, orient='index').reset_index()
df = df.rename(columns={'index':'Data', 0:'Notificações'})
pd.set_option('max_rows', 10)
pd.set_option('max_colwidth', None)
print(df, '\n')
#df


listaOcorrencias = list(numeroOcorrencias.values())
listX = np.arange(len(listaOcorrencias))
listY = np.arange(14000)
plt.plot(listX, listaOcorrencias)
plt.axis([0, len(listaOcorrencias), 0, 5000])
plt.show()

notificacaoData = df.values

def somarNotificacoes(array, min, max):
    soma = 0
    for i in range(min, max+1):
        soma = soma + array[i][1]
    return soma

notificacaoMarco = somarNotificacoes(notificacaoData, 0, 10) 
notificacaoAbril = somarNotificacoes(notificacaoData, 11, 40) 
notificacaoMaio = somarNotificacoes(notificacaoData, 41, 71) 
notificacaoJunho = somarNotificacoes(notificacaoData, 72, 101) 
notificacaoJulho = somarNotificacoes(notificacaoData, 101, 132) 
notificacaoAgosto = somarNotificacoes(notificacaoData, 132, 163) 
notificacaoSetembro = somarNotificacoes(notificacaoData, 164, 193) 
notificacaoOutubro = somarNotificacoes(notificacaoData, 194, 216) 

notificacaoSoma = [notificacaoMarco, notificacaoAbril, notificacaoMaio, 
                   notificacaoJunho, notificacaoJulho, notificacaoAgosto,
                   notificacaoSetembro, notificacaoOutubro]

dictMensais = [{'mês':'Marco', 'not': notificacaoSoma[0]}, {'mês': 'Abril', 'not': notificacaoSoma[1]},
               {'mês':'Maio', 'not': notificacaoSoma[2]}, {'mês': 'Junho', 'not': notificacaoSoma[3]},
               {'mês': 'Julho', 'not': notificacaoSoma[4]}, {'mês': 'Agosto', 'not': notificacaoSoma[5]},
               {'mês': 'Setembro', 'not': notificacaoSoma[6]}, {'mês': 'Outubro', 'not': notificacaoSoma[7]}]

def tabelarDicionario(meuDicionario, colList=None):
   if not colList:
       colList = list(meuDicionario[0].keys() if meuDicionario else [])
   myList = [colList] # 1st row = header
   for item in meuDicionario:
       myList.append([str(item[col] if item[col] != None else '')
       for col in colList])
   colSize = [max(map(len,col)) for col in zip(*myList)]
   formatStr = '  '.join(["{{:<{}}}".format(i) for i in colSize])
   myList.insert(1, ['' * i for i in colSize]) # Seperating line
   for item in myList: print(formatStr.format(*item))

tabelarDicionario(dictMensais)

df = pd.DataFrame({
    'langs':['Marco', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro'],
    'notificacoes':[21, 234, 372, 911, 1502, 1255, 2075, 13722]
})

ax = plt.gca()

bars = df.plot(kind='bar',x='langs',y='notificacoes',color='darkred', alpha=0.7, ax=ax)
df.plot(kind='line',x='langs',y='notificacoes',color='black', ax=ax, linestyle='dotted')
ax.set_xlabel('\nMês', fontsize=18, fontweight='bold')
ax.set_title('Notificações no estado de SP / mês\n', fontsize=22)
plt.show()